View(AllRawCount)
id.hcc = ((grepl("HCC", colnames(AllRawCount)) & !grepl("AZD9291", colnames(AllRawCount)))|
(grepl("H1975", colnames(AllRawCount)) & grepl("QCA", colnames(AllRawCount)))) &
grepl("Raw", colnames(AllRawCount))
hcc = AllRawCount[, id.hcc]
View(hcc)
View(hcc)
paste0(rep(c("DMSO_","AR_"), each = 3), rep(1:3, 2))
colnames(hcc) = paste0(rep(c("DMSO_","AR_"), each = 3), rep(1:3, 2))
coldat = data.frame(Trt = rep(c("DMSO", "AR"), each = 3))
coldat
coldat$Trt = relevel(coldat$Trt, ref = "DMSO")
coldat = data.frame(Trt = rep(c("DMSO", "AR"), each = 3))
coldat$Trt = relevel(coldat$Trt, ref = "DMSO")
design = ~ Trt
model.matrix(design, coldat)
coldat = data.frame(Trt = rep(c("DMSO", "AR"), each = 3))
coldat$Trt = relevel(factor(coldat$Trt), ref = "DMSO")
design = ~ Trt
model.matrix(design, coldat)
counts = as.matrix(hcc)
which(Gene$Gene_Name == "TRPM2")
hcc[8273, ]
counts = as.matrix(hcc)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = coldat,
design = design)
dds <- DESeq(dds)
resultsNames(dds)
tmp.res = cbind(Gene, counts, as.data.frame(DESeq2::results(dds, name = "Trt_AR_vs_DMSO")))
res = tmp.res[order(tmp.res$padj, decreasing = FALSE), ]
View(res)
tmp.res[8273,]
2^0.006052323
dds$Trt
res[1,]
colSums2(counts)
colSums2(counts)/median(colSums(counts))
counts.norm = sweep(counts, 2, colSums2(counts)/median(colSums(counts)), FUN = "/")
counts.norm[8237,]
counts.norm[8273,]
res.1 = read.csv("./results/DEG_PC9DMSO_vs_PC9AR_NoShrk.csv")
View(res.1)
which(res.1$Gene_Name == "TRPM2")
res.1[660, ]
rm(list = ls())
GENE_ANNO_GTF = "/Users/zhenxingguo/Downloads/mm9_knowngene.gtf"
txdb.1=makeTxDbFromGFF(GENE_ANNO_GTF,format="gtf")
exons.1 = exonsBy(txdb.1, by = "tx")
colkey <- columns(txdb.1)
select_col <- match(c("EXONCHROM","TXID","EXONSTART","EXONEND","EXONSTRAND","GENEID","TXNAME"),colkey)
keys(txdb.1, "TXID")
ID = keys(txdb.1, "TXID")
ID
max(as.numeric(ID))
mean(as.numeric(ID) == 1:length(ID))
temp = select(txdb, ID , c(columns(txdb))[select_col], "TXID")
temp = select(txdb.1, ID , c(columns(txdb))[select_col], "TXID")
temp = select(txdb.1, ID , c(columns(txdb.1))[select_col], "TXID")
match(c("EXONCHROM","TXID","EXONSTART","EXONEND","EXONSTRAND","GENEID","TXNAME"),names(temp))
View(temp)
select_col2 <- match(c("EXONCHROM","TXID","EXONSTART","EXONEND","EXONSTRAND","GENEID","TXNAME"),names(temp))
temp <- temp[,select_col2]
View(temp)
colnames(temp)=c("chr","feature","start","stop","strand","gene","transcript")
temp$"feature" <- "exon";
gtf <- temp
View(gtf)
GTF = read.table(GENE_ANNO_GTF, sep = "\t")
View(GTF)
View(temp)
View(GTF)
View(GTF)
GTF.exon = GTF[which(GTF$V3 == "exon"),]
View(GTF.exon)
gtf <- temp
View(gtf)
load("/Users/zhenxingguo/Dropbox/m6A/Zhenxing/analysis/working/RealdataAnalysis/data/Mouse/mm9_bins.exons.rda")
bins.exons$bins[1:5]
bins.exons$bins[1:10]
bins.exons$bins[1:50]
bins.exons$bins[1:20]
bins.exons$bins[10:25]
bins.exons$bins[10:30]
length(exons.1)
View(GTF.exon)
columns(txdb.1)
View(GTF.exon)
View(GTF)
View(gtf)
min(gtf$start)
which(gtf$start == 70)
gtf[475285,]
which(GTF.exon[,4] == 70)
GTF.exon[263130,]
min(bins.exons$bins@ranges@start)
min(bins.exons$allExons@ranges@start)
allBINS = as.data.frame(bins.exons$bins)
which.min(allBINS$start)
allBINS[1619871,]
which(bins.exons$bins@seqnames == "chrM")
genome = BSgenome.Mmusculus.UCSC.mm9
seqnames(info)
info = seqinfo(genome)
seqnames(info)
## exclude random chr
ii = grep("random", seqnames(info))
if(length(ii) > 0){
info = info[seqnames(info)[-ii]]
}else{
info = info[seqnames(info)]
}
info
wins = tileGenome(info, tilewidth=binsize, cut.last.tile.in.chrom=TRUE)
binsize = 50
wins = tileGenome(info, tilewidth=binsize, cut.last.tile.in.chrom=TRUE)
which(wins@seqnames == "chrM")
txdb = TxDb.Mmusculus.UCSC.mm9.knownGene
# txdb = loadDb("mm9_knownGenes.sqlite")
allExons = exonsBy(txdb, by="gene")
which(allExons@metadata$genomeInfo)
which(allExons@unlistData@seqnames == "chrM")
allExons
ee = unlist(allExons)
ee = unique(unlist(allExons))
length(ee)
ee = unlist(allExons)
length(ee)
which(ee@seqnames == "chrM")
View(gtf)
which(gtf$chr == "chrM")
gtf[which(gtf$chr == "chrM"),]
columns(txdb.1)
GENE_ANNO_GTF_1 = "/Users/zhenxingguo/Downloads/mm9_knownGenePep.gtf"
txdb_1=makeTxDbFromGFF(GENE_ANNO_GTF_1,format="gtf")
dd = read.table(GENE_ANNO_GTF_1, sep = "\t")
View(dd)
dd = read.table(GENE_ANNO_GTF_1, sep = ",")
dd = read.table(GENE_ANNO_GTF_1, sep = " ")
GENE_ANNO_GTF = "/Users/zhenxingguo/Downloads/mm9_knowngene.gtf"
txdb.1=makeTxDbFromGFF(GENE_ANNO_GTF,format="gtf")
exons.1 = exonsBy(txdb.1, by = "tx")
GTF = read.table(GENE_ANNO_GTF, sep = "\t")
exons.1
length(unique(exons.1))
length(unique(unlink(exons.1)))
length(unique(unlist(exons.1)))
GTF = read.table(GENE_ANNO_GTF, sep = "\t")
GTF.exon = GTF[which(GTF$V3 == "exon"),]
BID = .divide.anno.into.batches(gtf)
BID
BID = .divide.anno.into.batches(gtf)
no_batch = max(BID)
no_batch
Check_points = rep(NA, length(BID))
ibatch = 1
id = which(BID == ibatch)
exomePeak:::.get.gene.anno(ibatch,gtf,BID)
anno = exomePeak:::.get.gene.anno(ibatch,gtf,BID)
View(anno)
4832908 - 4797974
Check_points = rep(NA, length(BID))
#####
Check_points[id] = exomePeak:::.get.check.points(anno,PARAMETERS)[-(length(id)+1)]
.get.check.points
intronsByTranscript(txdb.1)
intronsByTranscript(txdb.1)
intronsByTranscript(txdb.1)[[1]]
exonsBy(txdb.1, by = "tx")
intronsByTranscript(txdb.1)[[1]]
exonsBy(txdb.1, by = "tx")[[1]]
transcripts(txdb.1)[[1]]
transcripts(txdb.1)[1]
tx.1 = transcripts(txdb.1)
threeUTRsByTranscript(txdb.1)[[1]]
threeUTRsByTranscript(txdb.1)
fiveUTRsByTranscript(txdb.1)
fiveUTRsByTranscript(txdb.1)[1]
transcripts(txdb.1)[1]
threeUTRsByTranscript(txdb.1)[1]
tx.1 = transcripts(txdb.1)
length(tx.1)
length(unique(tx.1))
tx.2 = unique(tx.1)
tx.1[1:10]
sum(countOverlaps(tx.1, tx.1) > 0)
sum(countOverlaps(tx.1, tx.1) > 1)
sum(countOverlaps(tx.2, tx.2) > 1)
hits = findOverlaps(tx.1, tx.1)
hits
tx.1[1:2]
tx.2[1:2]
genes(txdb.1)
length(genes(txdb.1))
genes(txdb.1)[1:10]
genes(txdb.1)[1:15]
tx.1[1:!5]
tx.1[1:15]
genes(TxDb.Mmusculus.UCSC.mm9.knownGene)
length(genes(TxDb.Mmusculus.UCSC.mm9.knownGene))
txdb = makeTxDbFromGFF(GENE_ANNO_GTF, format="gtf")
tx = transcripts(txdb)
i = 1
tx[1]
tx[i]
width(tx[i])
unique(tx)
length(tx)
length(unique(tx))
#### each transcript will be divided into bins of length "binsize"
tx = unique(tx)
tx
ii = which(grepl("random", tx@seqnames) | grepl("M", tx@seqnames))
tx[46277]
tx = transcripts(txdb)
txdb = makeTxDbFromGFF(GENE_ANNO_GTF, format="gtf")
txx = transcriptsBy(txdb, by = "gene")
txx
txx = transcriptsBy(TxDb.Mmusculus.UCSC.mm9.knownGene, by = "gene")
txx
length(txx)
length(unlink(txx))
length(unlist(txx))
length(unique(unlist(txx)))
dd = length(unique(unlist(txx)))
sum(countOverlaps(dd, dd) > 1)
dd = (unique(unlist(txx)))
sum(countOverlaps(dd, dd) > 1)
findOverlaps(dd,dd)
tx = unique(transcriptsBy(txdb, by = "gene"))
tmp = unique(transcriptsBy(txdb, by = "gene"))
ii = which(grepl("random", tmp@seqnames) | grepl("M", tmp@seqnames))
tmp = unique(transcriptsBy(txdb, by = "gene"))
tmp
tmp = unique(transcriptsBy(txdb))
tmp
txdb = makeTxDbFromGFF(GENE_ANNO_GTF, format="gtf")
tmp = unique(transcriptsBy(txdb))
tmp
tmp = unique(transcripts(txdb))
tmp = unique(transcripts(txdb))
ii = which(grepl("random", tmp@seqnames) | grepl("M", tmp@seqnames))
if(length(ii) > 0){
tx = tmp[-ii]
}
UNI.tx <- NULL
for (i in 1:length(tx)) {
if(length(UNI.tx) == 0){
UNI.tx = tx[i]
}else{
UNI.tx = union(UNI.tx, tx[i])
}
}
length(tx)
UNI.tx <- NULL
for (i in 1:length(tx)) {
cat(i, sep = "\n")
if(length(UNI.tx) == 0){
UNI.tx = tx[i]
}else{
UNI.tx = union(UNI.tx, tx[i])
}
}
?tileGenome
genome = BSgenome.Mmusculus.UCSC.mm9
info = seqinfo(genome)
## exclude random chr
ii = grep("random", seqnames(info))
if(length(ii) > 0){
info = info[seqnames(info)[-ii]]
}else{
info = info[seqnames(info)]
}
info
tmp = unique(transcripts(txdb))
ii = which(grepl("random", tmp@seqnames) | grepl("M", tmp@seqnames))
if(length(ii) > 0){
tx = tmp[-ii]
}
tx@seqnames
tx
idx <- split(1:length(tx@seqnames), tx@seqnames)
idx
View(idx)
length(tx@seqnames)
unique(tx@seqnames)
as.data.frame(tx)
idx <- split(1:length(tx@seqnames), as.data.frame(tx)$seqnames)
View(idx)
idx <- split(1:length(as.data.frame(tx)$seqnames), as.data.frame(tx)$seqnames)
View(idx)
names(idx)
tmp = unique(transcripts(txdb))
ii = which(grepl("random", tmp@seqnames) | grepl("M", tmp@seqnames))
if(length(ii) > 0){
tx = tmp[-ii]
}
tx = as.data.frame(tx)
View(tx)
unique(tx$seqnames)
tmp = unique(transcripts(txdb))
ii = which(grepl("random", tmp@seqnames) | grepl("M", tmp@seqnames))
if(length(ii) > 0){
tx = tmp[-ii]
}
idx <- split(1:length(as.data.frame(tx)$seqnames), as.data.frame(tx)$seqnames)
iii = which(grepl("random", names(idx)) | grepl("M", names(idx)))
iii = (grepl("random", names(idx)) | grepl("M", names(idx)))
idx[iii] = NULL
View(idx)
tmp = unique(transcripts(txdb))
idx <- split(1:length(as.data.frame(tmp)$seqnames), as.data.frame(tmp)$seqnames)
iii = (grepl("random", names(idx)) | grepl("M", names(idx)))
idx[iii] = NULL
View(idx)
allchr = names(idx)
ichr = 1
thischr = allchr[ichr]
thiset  = idx[[ichr]]
thiset
tmp[thiset]
unique(tmp[thiset]@seqnames)
idx[1]
idx[2]
idx[[1]]
start(tmp[thiset])
min(start(tmp[thiset]))
max(end(tmp[thiset]))
info
seq(start, end, by = binsize)
start
thisstart = min(start(tmp[thiset]))
thisend = max(end(tmp[thiset]))
seq(thisstart, thisend, by = binsize)
thisstart
134-85+1
tile(thisbins,1)
thisbins = seq(thisstart, thisend, by = binsize)
thisbins.start = seq(thisstart, thisend, by = binsize)
thisbins.start = seq(thisstart, thisend, by = binsize)
thisbins.end = c(thisbins.start[-1] - 1,thisend)
thisbins.start[1:5]
thisbins.end[1:5]
thisbins.start[3876138:3876139]
thisbins.end[3876138:3876139]
197002909 - 197002885
seq(1,10,3)
seq(1,10,4)
c(3,6,9,10)
seq(1,10,4)
c(4,8,10)
unique(tmp@strand[thiset])
unique(tmp@strand)
thiset
thiset.strand = strand(tmp[thiset])
thiset.strand
tmp[thiset]@strand
as.character(tmp[thiset]@strand)
thiset.strand = as.character(strand(tmp[thiset]))
thiset.strand
duplicated(thiset.strand)
duplicated(thiset.strand)[995:2000]
strand(tmp[thiset])
unique(tmp[thiset][1:1260])
unique(tmp[thiset]@strand[1:1260])
unique(tmp[thiset]@strand[1:1261])
### split negative and positive bins
### positive
ii.pos = which(thiset.strand == "+")
pos.start = min(start(tmp[thiset[ii.pos]]))
pos.end = max(end(tmp[thiset[ii.pos]]))
tmp[thiset[ii.pos]]
posbins.start = seq(pos.start, pos.end, by = binsize)
posbins.end = c(thisbins.start[-1] - 1,thisend)
unique(tmp@strand[thiset[ii.pos]])
posbin.strand = unique(tmp@strand[thiset[ii.pos]])
posbin.strand
posbins.start
posbins.end
posbin.strand
pos.bin = GRanges(Rle(thischr), IRanges(posbins.start, posbins.end), Rle("+"))
### split negative and positive bins
### positive
ii.pos = which(thiset.strand == "+")
pos.min = min(start(tmp[thiset[ii.pos]]))
pos.max = max(end(tmp[thiset[ii.pos]]))
posbins.start = seq(pos.min, pos.max, by = binsize)
posbins.end = c(posbins.start[-1] - 1,pos.max)
posbin.strand = unique(tmp@strand[thiset[ii.pos]])
pos.bin = GRanges(Rle(thischr), IRanges(posbins.start, posbins.end), Rle("+"))
pos.bin
### negative
ii.neg = which(thiset.strand == "-")
tmp[thiset[ii.neg]]
### negative
ii.neg = which(thiset.strand == "-")
neg.min = min(start(tmp[thiset[ii.neg]]))
neg.max = max(end(tmp[thiset[ii.neg]]))
negbins.start = seq(neg.min, neg.max, by = binsize)
negbins.end = c(negbins.start[-1] - 1, neg.max)
negbin.strand = unique(tmp@strand[thiset[ii.neg]])
neg.bin = GRanges(Rle(thischr), IRanges(negbins.start, negbins.end), Rle("-"))
neg.bin
length(pos.bin)
length(neg.bin)
length(union(pos.bin, neg.bin))
union(pos.bin, neg.bin)
length(c(pos.bin, neg.bin))
3841323 + 3876139
mean(countOverlaps(neg.bin, neg.bin) == 1)
mean(countOverlaps(pos.bin, pos.bin) == 1)
thisbins = c(pos.bin, neg.bin)
thisbins
allchr = names(idx)
allbins = NULL
allchr = names(idx)
allbins = NULL
for (ichr in 1:length(allchr)) {
cat(allchr[ichr], sep = "\t")
thischr = allchr[ichr]
thiset  = idx[[ichr]]
thiset.strand = as.character(strand(tmp[thiset]))
### split negative and positive bins
### positive
ii.pos = which(thiset.strand == "+")
pos.min = min(start(tmp[thiset[ii.pos]]))
pos.max = max(end(tmp[thiset[ii.pos]]))
posbins.start = seq(pos.min, pos.max, by = binsize)
posbins.end = c(posbins.start[-1] - 1,pos.max)
posbin.strand = unique(tmp@strand[thiset[ii.pos]])
pos.bin = GRanges(Rle(thischr), IRanges(posbins.start, posbins.end), Rle("+"))
### negative
ii.neg = which(thiset.strand == "-")
neg.min = min(start(tmp[thiset[ii.neg]]))
neg.max = max(end(tmp[thiset[ii.neg]]))
negbins.start = seq(neg.min, neg.max, by = binsize)
negbins.end = c(negbins.start[-1] - 1, neg.max)
negbin.strand = unique(tmp@strand[thiset[ii.neg]])
neg.bin = GRanges(Rle(thischr), IRanges(negbins.start, negbins.end), Rle("-"))
#### combine positive and negtive bins
thisbins = c(pos.bin, neg.bin)
if(length(allbins) == 0){
allbins = thisbins
}else{
allbins = c(allbins, thisbins)
}
}
allbins
length(allbins)
exonsBy(txdb)
unlist(exonsBy(txdb))
intronsByTranscript(txdb)
####
allExons = unlist(exonsBy(txdb))
allIntron = unlist(intronsByTranscript(txdb))
## get bins on the exons
ix = allbins %over% allExons
allExons
bins.exons = allbins[ix]
ix = (allbins %over% allExons) | (allbins %over% allIntron)
bins.exIn = allbins[ix]
bins.exIn
bins.exons
unique(strand(bins.exons))
setwd("~/Dropbox/m6A/Zhenxing/analysis/working/package/TRES/R")
bins.exons
rm(list = ls())
######## added on April 14, 2020
############# check wheter the results of 2wk mouse is consistent with
#############            previous results based on muMean and fdr 0.05
#library(devtools)
#install_github("https://github.com/ZhenxingGuo0015/TRES")
library(TRES)
IP.file = c("2.bam", "4.bam")
Input.file = c("1.bam", "3.bam")
#sf0 = c(1.572, 1.437, 1.042, 0.983)
t1 = Sys.time()
TRES_peak(IP.file = IP.file,
Input.file = Input.file,
genomeBuild = "mm9",
sf0 = sf0,
lfc.cutoff0 = 1.1, # 0.8
InputDir = "/Users/zhenxingguo/Documents/research/m6a/Me/working/RealdataAnalysis/data/Mouse/bam/",
OutputDir = "/Users/zhenxingguo/Documents/research/m6a/Me/working/RealdataAnalysis/Results/Mouse/PeakList/MyPeak/",
experiment_name = "cb_2wk",
filetype = "bam",
IncludeIntron = FALSE)
######## added on April 14, 2020
############# check wheter the results of 2wk mouse is consistent with
#############            previous results based on muMean and fdr 0.05
#library(devtools)
#install_github("https://github.com/ZhenxingGuo0015/TRES")
library(TRES)
IP.file = c("2.bam", "4.bam")
Input.file = c("1.bam", "3.bam")
#sf0 = c(1.572, 1.437, 1.042, 0.983)
t1 = Sys.time()
TRES_peak(IP.file = IP.file,
Input.file = Input.file,
genomeBuild = "mm9",
sf0 = sf0,
lfc.cutoff0 = 1.1, # 0.8
InputDir = "/Users/zhenxingguo/Documents/research/m6a/Me/working/RealdataAnalysis/data/Mouse/bam/",
OutputDir = "/Users/zhenxingguo/Documents/research/m6a/Me/working/RealdataAnalysis/Results/Mouse/PeakList/MyPeak/",
experiment_name = "cb_2wk",
filetype = "bam",
IncludeIntron = FALSE)
library(exomePeak)
?exomePeak
?metdiff
library(MeTDiff)
